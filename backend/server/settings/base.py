"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

import environ

env = environ.Env()
env.read_env('.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rsdtfykhb27%qp3hor!#_q+z)8ufe5yt!y%l!45yzqsu-dd^o8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'djoser',
    'corsheaders',
    # 'django_filters',
    # 'django_extensions',
    # 'drf_spectacular',
    # 'django_cleanup',
    # 'import_export',
    # 'solo',
    # 'cloudinary',
    # 'cloudinary_storage',
    # 'axes',
]

LOCAL_APPS = [
    # 'apps.proofreading',
    'apps.account',
    'apps.setting',
    # 'apps.mail',
    'apps.ai_talk',
    # 'apps.custom_authtoken'
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

if DEBUG:
    DEBUG_TOOLS = [
        'rest_framework_swagger',
    ]
    INSTALLED_APPS += DEBUG_TOOLS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # AxesMiddleware should be the last middleware in the MIDDLEWARE list.
    # It only formats user lockout messages and renders Axes lockout responses
    # on failed user authentication attempts from login views.
    # If you do not want Axes to override the authentication response
    # you can skip installing the middleware and use your own views.
    # 'axes.middleware.AxesMiddleware',
]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ja-JP'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework用の設定
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DATETIME_FORMAT': '%Y/%m/%d %H:%M',
}

# django-cors-headers の設定
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesBackend',
    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',
]

DJOSER = {
    # メールアドレスでログイン
    'LOGIN_FIELD': 'email',
    # アクティベートメールの送信
    'SEND_ACTIVATION_EMAIL': True,
    # アクティベート完了メールの送信
    'SEND_CONFIRMATION_EMAIL': True,
    # メールアドレス変更完了メールの送信
    'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
    # パスワード変更完了メールの送信
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    # アカウント登録時に確認用パスワードを一緒に送信
    'USER_CREATE_PASSWORD_RETYPE': True,
    # メールアドレス変更時に確認用パスワードを一緒に送信
    'SET_USERNAME_RETYPE': True,
    # パスワード変更時に確認用パスワードを一緒に送信
    'SET_PASSWORD_RETYPE': True,
    # アクティベートURL
    'ACTIVATION_URL': 'auth/activation/?uid={uid}&token={token}',
    # メールアドレスリセット完了用URL（モデルを変更しているためユーザーネームではない）
    'USERNAME_RESET_CONFIRM_URL': 'settings/confirm-email/?uid={uid}&token={token}',
    # パスワードリセット完了用URL
    'PASSWORD_RESET_CONFIRM_URL': 'settings/confirm-password/?uid={uid}&token={token}',
    # カスタムユーザー用シリアライザー
    'SERIALIZERS': {
        'user_create': 'apps.account.serializers.UserSerializer',
        'user': 'apps.account.serializers.UserSerializer',
        'current_user': 'apps.account.serializers.UserSerializer',
    },
    'EMAIL': {
        # アクティベート
        'activation': 'apps.mail.email.ActivationEmail',
        # アクティベート完了
        'confirmation': 'apps.mail.email.ConfirmationEmail',
        # パスワード変更
        'password_reset': 'apps.mail.email.PasswordResetEmail',
        # パスワード変更完了
        'password_changed_confirmation': 'apps.mail.email.PasswordChangedConfirmationEmail',
        # メールアドレス変更（モデルを変更しているためユーザーネームではない）
        'username_reset': 'apps.mail.email.UsernameResetEmail',
        # メールアドレス変更完了（モデルを変更しているためユーザーネームではない）
        'username_changed_confirmation': 'apps.mail.email.UsernameChangedConfirmationEmail',
    },
}
# カスタムユーザーモデルの使用を指定
AUTH_USER_MODEL = 'account.User'

MEDIA_URL = '/media/'
# MEDIA_ROOT = str(BASE_DIR / 'apps.image.media')

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# CLOUDINARY_STORAGE = {
#     'CLOUD_NAME': env('CLOUDINARY_NAME'),
#     'API_KEY': env('CLOUDINARY_API_KEY'),
#     'API_SECRET': env('CLOUDINARY_API_SECRET'),
# }
